---
import OgTags from "./_OgTags.astro";
---

<!doctype html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />

    <title>techstyle.css</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="https://danmercer.net/api/favicon?text=fff&bg=000"
    />
    <meta name="theme-color" content="#000000" />
    <link rel="stylesheet" href="techstyle.css" />

    <OgTags />
  </head>

  <body>
    <header>
      <a href="https://danmercer.net">Home</a>
      <h1><code>techstyle.css</code></h1>
      <a href="https://github.com/drmercer/techstyle">GitHub</a>
    </header>

    <main>
      <p>
        Techstyle is an opinionated stylesheet for quickly building web apps
        that look &quot;good enough to use.&quot;
      </p>
      <section>
        <form class="t-card" aria-label="Theme settings">
          <label>
            <input type="range" id="hue" min="0" max="360" />
            Hue
          </label>
          <label>
            <input type="checkbox" id="invert" />
            Swapped
          </label>
          <label>
            <input type="checkbox" id="dark" />
            Dark
          </label>
          <button type="button" id="randomize"> Randomize </button>

          <p>Code snippet:</p>
          <pre id="theme-output"></pre>

          <footer>
            <button type="button" id="copy">Copy</button>
            <a href="/public/techstyle.css" download
              >Download <code>techstyle.css</code></a
            >
          </footer>
        </form>
      </section>

      <section>
        <h2>A list of cards</h2>

        <ul>
          <li class="t-card">Card one</li>
          <li class="t-card">Card two</li>
          <li class="t-card">Card three</li>
        </ul>
      </section>

      <section>
        <h2>Side-by-side panels (if room)</h2>

        <div class="t-sidebyside">
          <section>
            <h3>First panel</h3>
            <div class="t-card">A card</div>
          </section>
          <section>
            <h3>Second panel</h3>
            <div class="t-card">Another card</div>
          </section>
          <section>
            <h3>Third panel</h3>
            <div class="t-card">One more card</div>
            <div class="t-card">Another card</div>
          </section>
        </div>
      </section>

      <section>
        <h2>Cards and form elements</h2>
        <form
          class="t-card"
          aria-label="Another example form"
          action="https://duckduckgo.com/"
          target="_blank"
        >
          <fieldset>
            <input name="q" type="search" placeholder="Search DuckDuckGo" />
          </fieldset>
          <button> Go </button>
        </form>
      </section>

      <form class="t-card" aria-label="Textarea demo">
        <label>
          Multiline text (textarea):
          <textarea></textarea>
        </label>
        <fieldset>
          <button type="reset"> Reset </button>
          <button type="reset"> Save </button>
        </fieldset>
      </form>

      <div class="t-card" aria-label="A card containing a (themed!) iframe">
        <iframe title="My Iframe" class="t-tinted" src="https://example.com"
        ></iframe>
      </div>
    </main>

    <section>
      <h2>A full-page section</h2>

      <section class="t-fullheight">
        <div class="t-card">
          <p>A vertically centered card in the full-page section</p>
          <p>
            Themed emojis: <span class="t-tinted">ðŸ˜Ž ðŸŒ³ ðŸ¦–</span>
          </p>
        </div>
      </section>
    </section>

    <section>
      <h2>A full-page section with header and footer</h2>

      <section class="t-fullheight">
        <header>
          <span>This is the header</span>
          <div>
            <button popovertarget="demopopover">Open popover</button>
            <div popover id="demopopover">
              This is a popover
              <ul>
                <li>One</li>
                <li>Two</li>
                <li>Three</li>
              </ul>
            </div>
          </div>
        </header>
        <div class="t-card">
          A vertically centered card in the full-page section
        </div>
        <footer>
          <div>
            <span>This is the footer</span>
            <button popovertarget="demodialog">Open dialog</button>
            <dialog id="demodialog" popover="auto">
              <p>Hello, this is a dialog!</p>
              <form method="dialog">
                <footer>
                  <button autofocus type="submit">Cancel</button>
                  <button type="submit">Ok</button>
                </footer>
              </form>
            </dialog>
          </div>
        </footer>
      </section>
    </section>

    <section>
      <h2>Example application screens</h2>

      <ul>
        <li>
          <a href="./examples/landing">A landing page for a cool app</a>
        </li>
        <li>
          <a href="./examples/popover">Popovers in various places</a>
        </li>
        <li>
          <a href="./examples/monotask">A monotasking app</a>
        </li>
        <li>
          <a href="./examples/monotask-planning"
            >A monotasking app (planning view)</a
          >
        </li>
      </ul>
    </section>

    <div>
      <small>
        <details>
          <summary><strong>Why the name "techstyle"?</strong></summary>
          <p>
            It's a stylesheet that looks kind of techy. It's also a pun on
            textile - my last name, Mercer, comes from a word meaning "a textile
            merhant", so this is a way of living up to that heritage. ðŸ˜†
          </p>
        </details>
      </small>
    </div>
    <footer>
      <small>By <a href="https://danmercer.net">Dan Mercer</a></small>
    </footer>

    <div
      id="colorsensor"
      style="display: none; color: rgb(from var(--t-color-fg) r g b); background-color: rgb(from var(--t-color-bg) r g b);"
    >
    </div>

    <script>
      const hue = document.querySelector("#hue");
      hue.value = Math.floor(Math.random() * 361);
      hue.oninput = update;

      const invert = document.querySelector("#invert");
      invert.oninput = update;

      const dark = document.querySelector("#dark");
      dark.checked = !!window.matchMedia?.("(prefers-color-scheme: dark)")
        ?.matches;
      dark.oninput = update;

      const themeOutput = document.querySelector("#theme-output");

      const sensor = document.querySelector("#colorsensor");

      update();

      const randomize = document.querySelector("#randomize");
      randomize.onclick = () => {
        hue.value = Math.floor(Math.random() * 361);
        dark.checked = Math.random() < 0.5;
        invert.checked = Math.random() < 0.5;
        update();
      };

      const copy = document.querySelector("#copy");
      copy.onclick = async () => {
        try {
          await navigator.clipboard.writeText(themeOutput.innerText.trim());
          copy.innerText = "Copied!";
        } catch (e) {
          console.error("Failed to copy to clipboard", e);
          copy.innerText = "Error :(";
        }
        setTimeout(() => {
          copy.innerText = "Copy";
        }, 1000);
      };

      function getColorHex(property) {
        const raw = window.getComputedStyle(sensor).getPropertyValue(property);
        // example: color(srgb 0.248018 0.41213 0.886475)
        const m = raw.match(/color\(srgb (\S+) (\S+) (\S+)\)/);
        if (!m) {
          console.error("unable to parse color", raw);
          return "000000";
        }
        return m
          .slice(1)
          .map((n) =>
            Math.max(0, Math.min(255, Math.round(n * 255)))
              .toString(16)
              .padStart(2, "0")
          )
          .join("");
      }

      function update() {
        const h = hue.value;
        const s = invert.checked ? "1" : "";
        const d = dark.checked ? "dark" : "only light";
        document.documentElement.style.setProperty("--t-hue", h);
        document.documentElement.style.setProperty("--t-swapped", s);
        document.documentElement.style.setProperty("color-scheme", d);

        const fg = getColorHex("color");
        const bg = getColorHex("background-color");
        const iconUrl = `https://danmercer.net/api/favicon?text=${fg}&bg=${bg}`;

        document.querySelector('link[rel="icon"]').href = iconUrl;
        const themeColor = "#" + (invert.checked ? bg : fg);
        document.querySelector("meta[name=theme-color]").content = themeColor;

        themeOutput.innerText = `
<!-- download and host the stylesheet yourself: -->
<link rel="stylesheet" href="/techstyle.css" />
<!-- set your theme: -->
<style>
  :root {
    --t-hue: ${h};
    color-scheme: ${d};
    ${s ? "--t-swapped: 1;" : ""}
  }
</style>
<meta name="theme-color" content="${themeColor}"></meta>
<!-- "DM" favicon - probably leave this part out if you're not Dan :) -->
<link rel="icon" href="${iconUrl}"></link>
      `
          .trim()
          .replaceAll(/\n\s+\n/g, "\n"); // replace blank lines
      }
    </script>
  </body>
</html>
