---
import OgTags from "./_OgTags.astro";
---

<!doctype html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />

    <title>techstyle.css</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="https://danmercer.net/api/favicon?text=fff&bg=000"
    />
    <meta name="theme-color" content="#000000" />
    <link rel="stylesheet" href="techstyle.css" />

    <OgTags />
  </head>

  <body>
    <header>
      <a href="https://danmercer.net">Home</a>
      <h1><code>techstyle.css</code></h1>
      <a href="https://github.com/drmercer/techstyle">GitHub</a>
    </header>

    <main>
      <p>
        Techstyle is an opinionated stylesheet for quickly building web apps
        that look &quot;good enough to use.&quot;
      </p>
      <section>
        <form class="t-card" aria-label="Theme settings">
          <label>
            <input type="range" id="hue" min="0" max="360" />
            Hue
          </label>
          <label>
            <input type="checkbox" id="invert" />
            Swapped
          </label>
          <label>
            <input type="checkbox" id="dark" />
            Dark
          </label>
          <button type="button" id="randomize"> Randomize </button>

          <p>Code snippet:</p>
          <pre id="theme-output"></pre>

          <footer>
            <button type="button" id="copy">Copy</button>
            <a href="/techstyle.css" download
              >Download <code>techstyle.css</code></a
            >
          </footer>
        </form>
      </section>

      <section>
        <h2>A list of cards</h2>

        <ul>
          <li class="t-card">Card one</li>
          <li class="t-card">Card two</li>
          <li class="t-card">Card three</li>
        </ul>
      </section>

      <section>
        <h2>Side-by-side panels (if room)</h2>

        <div class="t-sidebyside">
          <section>
            <h3>First panel</h3>
            <div class="t-card">A card</div>
          </section>
          <section>
            <h3>Second panel</h3>
            <div class="t-card">Another card</div>
          </section>
          <section>
            <h3>Third panel</h3>
            <div class="t-card">One more card</div>
            <div class="t-card">Another card</div>
          </section>
        </div>
      </section>

      <section>
        <h2>Cards and form elements</h2>
        <form
          class="t-card"
          aria-label="Another example form"
          action="https://duckduckgo.com/"
          target="_blank"
        >
          <fieldset>
            <input name="q" type="search" placeholder="Search DuckDuckGo" />
          </fieldset>
          <button> Go </button>
        </form>
      </section>

      <form class="t-card" aria-label="Textarea demo">
        <label>
          Multiline text (textarea):
          <textarea></textarea>
        </label>
        <fieldset>
          <button type="reset"> Reset </button>
          <button type="reset"> Save </button>
        </fieldset>
      </form>

      <div class="t-card" aria-label="A card containing a (themed!) iframe">
        <iframe title="My Iframe" class="t-tinted" src="https://example.com"
        ></iframe>
      </div>
    </main>

    <section>
      <h2>A full-page section</h2>

      <section class="t-fullheight">
        <div class="t-card">
          <p>A vertically centered card in the full-page section</p>
          <p>
            Themed emojis: <span class="t-tinted">ðŸ˜Ž ðŸŒ³ ðŸ¦–</span>
          </p>
        </div>
      </section>
    </section>

    <section>
      <h2>A full-page section with header and footer</h2>

      <section class="t-fullheight">
        <header>
          <span>This is the header</span>
          <div>
            <button popovertarget="demopopover">Open popover</button>
            <div popover id="demopopover">
              This is a popover
              <ul>
                <li>One</li>
                <li>Two</li>
                <li>Three</li>
              </ul>
            </div>
          </div>
        </header>
        <div class="t-card">
          A vertically centered card in the full-page section
        </div>
        <footer>
          <div>
            <span>This is the footer</span>
            <button id="open-dialog">Open dialog</button>
            <dialog id="demodialog">
              <p>Hello, this is a dialog!</p>
              <form method="dialog">
                <footer>
                  <button autofocus type="submit">Cancel</button>
                  <button type="submit">Ok</button>
                </footer>
              </form>
            </dialog>
          </div>
        </footer>
      </section>
    </section>

    <section>
      <h2>Example application screens</h2>

      <ul>
        <li>
          <a href="./examples/landing">A landing page for a cool app</a>
        </li>
        <li>
          <a href="./examples/popover">Popovers in various places</a>
        </li>
        <li>
          <a href="./examples/monotask">A monotasking app</a>
        </li>
        <li>
          <a href="./examples/monotask-planning"
            >A monotasking app (planning view)</a
          >
        </li>
      </ul>
    </section>

    <div>
      <small>
        <details>
          <summary><strong>Why the name "techstyle"?</strong></summary>
          <p>
            It's a stylesheet that looks kind of techy. It's also a pun on
            textile - my last name, Mercer, comes from a word meaning "a textile
            merhant", so this is a way of living up to that heritage. ðŸ˜†
          </p>
        </details>
      </small>
    </div>
    <footer>
      <small>By <a href="https://danmercer.net">Dan Mercer</a></small>
    </footer>

    <div
      id="colorsensor"
      style="display: none; color: rgb(from var(--t-color-fg) r g b); background-color: rgb(from var(--t-color-bg) r g b);"
    >
    </div>

    <script>
      const hue = document.querySelector("#hue");
      hue.value = Math.floor(Math.random() * 361);
      hue.oninput = update;

      const invert = document.querySelector("#invert");
      invert.oninput = update;

      const dark = document.querySelector("#dark");
      dark.checked = !!window.matchMedia?.("(prefers-color-scheme: dark)")
        ?.matches;
      dark.oninput = update;

      const themeOutput = document.querySelector("#theme-output");

      const sensor = document.querySelector("#colorsensor");

      update();

      const randomize = document.querySelector("#randomize");
      randomize.onclick = () => {
        hue.value = Math.floor(Math.random() * 361);
        dark.checked = Math.random() < 0.5;
        invert.checked = Math.random() < 0.5;
        update();
      };

      const copy = document.querySelector("#copy");
      copy.onclick = async () => {
        try {
          await navigator.clipboard.writeText(themeOutput.innerText.trim());
          copy.innerText = "Copied!";
        } catch (e) {
          console.error("Failed to copy to clipboard", e);
          copy.innerText = "Error :(";
        }
        setTimeout(() => {
          copy.innerText = "Copy";
        }, 1000);
      };

      function getColorHex(property) {
        const raw = window.getComputedStyle(sensor).getPropertyValue(property);
        // example: color(srgb 0.248018 0.41213 0.886475)
        const m = raw.match(/color\(srgb (\S+) (\S+) (\S+)\)/);
        if (!m) {
          console.error("unable to parse color", raw);
          return "000000";
        }
        return m
          .slice(1)
          .map((n) =>
            Math.max(0, Math.min(255, Math.round(n * 255)))
              .toString(16)
              .padStart(2, "0")
          )
          .join("");
      }

      function update() {
        const h = hue.value;
        const s = invert.checked ? "1" : "";
        const d = dark.checked ? "dark" : "only light";
        document.documentElement.style.setProperty("--t-hue", h);
        document.documentElement.style.setProperty("--t-swapped", s);
        document.documentElement.style.setProperty("color-scheme", d);

        const fg = getColorHex("color");
        const bg = getColorHex("background-color");
        const faviconSvg = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 333 333">
  <rect width="333" height="333" rx="50" ry="50" fill="#${bg}" />
  <path
    d="M55.777 94.753h31.085q9.752 0 18.163 2.468 8.411 2.469 14.69 7.345 6.247 4.876 9.843 12.16 3.596 7.283 3.596 17.035v66.406q0 8.38-1.829 14.75-1.828 6.37-4.754 11.032-2.956 4.663-6.704 7.924-3.749 3.26-7.62 5.303-9.203 4.937-20.875 5.577H55.777q-6.095 0-9.417-2.103-3.322-2.073-4.815-5.547-1.493-3.504-1.768-7.893-.274-4.388-.274-9.112V119.194q0-4.602.274-9.02.275-4.39 1.768-7.803 1.493-3.443 4.815-5.516 3.322-2.102 9.417-2.102Zm30.232 25.08H72.08v99.412H86.01q4.601-.214 8.258-2.134 1.494-.762 2.987-2.042 1.493-1.28 2.682-3.047 1.188-1.768 1.859-4.236.7-2.469.7-5.669v-63.206q0-3.535-.7-6.278-.67-2.742-1.86-4.784-1.188-2.012-2.681-3.413-1.493-1.402-2.987-2.256-3.657-2.041-8.258-2.346Zm142.503 90.208h-2.164q-3.109 0-5.303-1.189-2.194-1.158-3.779-2.986-1.615-1.829-2.743-4.084-1.127-2.255-1.89-4.388l-20.357-58.696h-2.773v89.354q0 3.413-.427 6.4-.426 3.017-1.89 5.333-1.431 2.286-4.266 3.627-2.834 1.34-7.77 1.34-5.578 0-8.778-1.34-3.23-1.341-4.845-3.627-1.585-2.316-2.012-5.333-.426-2.987-.426-6.4V119.194q0-4.602.243-9.02.275-4.39 1.768-7.803 1.524-3.443 4.785-5.516 3.26-2.102 9.264-2.102h14.567q3.657 0 6.156.274 2.53.274 4.663 1.828 2.133 1.555 4.236 4.968 2.103 3.444 4.602 9.691 2.53 6.278 5.851 15.97 3.322 9.69 8.137 23.83l2.774 8.595h2.59l3.413-10.727q4.389-13.501 7.497-22.826 3.109-9.326 5.486-15.36 2.346-6.065 4.205-9.326 1.89-3.26 3.993-4.815 2.072-1.554 4.54-1.828 2.469-.274 6.004-.274h15.634q6.004 0 9.264 2.102 3.261 2.073 4.785 5.516 1.493 3.414 1.768 7.802.244 4.419.244 9.02v108.859q0 3.413-.427 6.4-.427 3.017-2.012 5.333-1.615 2.286-4.845 3.627-3.2 1.34-8.777 1.34-4.937 0-7.771-1.34-2.834-1.341-4.267-3.627-1.463-2.316-1.89-5.333-.426-2.987-.426-6.4v-89.354h-2.987l-20.144 58.696q-.853 2.133-1.95 4.388-1.067 2.255-2.682 4.084-1.585 1.828-3.749 2.986-2.133 1.189-5.12 1.189Z"
    fill="#${fg}" />
</svg>
        `
        const iconUrl = "data:image/svg+xml;utf8," + encodeURIComponent(faviconSvg.trim());

        document.querySelector('link[rel="icon"]').href = iconUrl;
        const themeColor = "#" + (invert.checked ? bg : fg);
        document.querySelector("meta[name=theme-color]").content = themeColor;

        themeOutput.innerText = `
<!-- download and host the stylesheet yourself: -->
<link rel="stylesheet" href="/techstyle.css" />
<!-- set your theme: -->
<style>
  :root {
    --t-hue: ${h};
    color-scheme: ${d};
    ${s ? "--t-swapped: 1;" : ""}
  }
</style>
<meta name="theme-color" content="${themeColor}"></meta>
      `
          .trim()
          .replaceAll(/\n\s+\n/g, "\n"); // replace blank lines
      }

      // Dialog modal logic
      const openDialogBtn = document.getElementById('open-dialog');
      const demoDialog = document.getElementById('demodialog');
      if (openDialogBtn && demoDialog) {
        openDialogBtn.onclick = () => {
          (demoDialog as HTMLDialogElement).showModal();
        };
      }
    </script>
  </body>
</html>
